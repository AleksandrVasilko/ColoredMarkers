Выбор правильных цветов для вашей веб-страницы может значительно улучшить эстетический привлекательность для ваших читателей.

В этом курсе вы создадите набор цветных маркеров. Вы узнаете различные способы определения значений цветов и как сочетать цвета друг с другом.



Шаг 1
Как вы видели в предыдущих проектах, веб-страницы должны начинаться с DOCTYPE html декларации, за которой следует html элемент.

Добавить DOCTYPE html декларация в верхней части документа, и html элемент после этого. Дать HTML-элементу атрибут lang с en в качестве его значения.



Шаг 2
Вложить элемент head в элемент html. Сразу после элемента head добавить элемент body.



Шаг З
Помните, что элемент title даёт поисковым системам дополнительную информацию о странице. Он также отображает содержимое этого элемента заголовка двумя другими способами:

- в заголовке, когда страница открыта
- в вкладке браузера для страницы, когда вы перемещаете на нее. Даже если эта вкладка не активна, как только вы перемещаете её, отображается текст заголовка.

В элементе head вложить элемент title с текстом Colored Markers.



Шаг 4
Атрибут charset определяет кодировку символов, используемую документом. utf-8 (Unicode Transformation Format - 8-bit) - стандарт кодирования символов, используемый для электронной связи.

Внутри элемента head, вложить мета-элемент с атрибутом charset на "utf-8".



Шаг 5
Вы можете иметь несколько метаэлементов на веб-странице. Каждый метаэлемент добавляет информацию о странице, которая не может быть выражена другими элементами HTML.

Добавить другой meta-элемент в head. Дайте ему атрибут name, установленный на "viewport", а content - на "width=device-width, initial-scale=1.0", чтобы ваша страница выглядела одинаково на всех устройствах.



Шаг 6
Теперь вы готовы начать добавление контента на страницу.

Внутри тела вложить элемент h1 в текст CSS Color Markers.



Шаг 7
В этом проекте вы будете работать с внешним файлом CSS для стилизования страницы. Мы уже создали для вас файл styles.css. Но перед тем, как вы сможете использовать его, вам нужно будет связать его с страницей.

Вложить элемент link в элемент head. Дать ему атрибут rel, установленный на "stylesheet" и атрибут href, установленный на "styles.css".



Шаг 8
Теперь, когда ваш внешний CSS файл настроен, вы можете начать оформление страницы.

Как напоминание, вот как ориентировать элемент абзаца и выравнивать его вправо:

Пример кода

p {
  text-align: right;
}

Создать новое правило CSS, которое нацелено на элемент h1, и установить его свойство text-align в center.



Шаг 9
Теперь вы добавляете некоторые элементы, которые в конечном итоге вы будете стилизовать в цветные маркеры.

Во-первых, внутри элемента body, добавьте элемент div и установите его атрибут class в container. Убедитесь, что элемент div находится ниже элемента h1.



Шаг 10
Далее, в div-элементе, добавьте еще один div-элемент и дайте ему класс marker.



Шаг 11
Настало время добавить цвет маркеру. Помните, что один из способов добавления цвета элементу - использовать ключевое слово цвета, например, black, cyan, или yellow.

Как напоминание, вот как настраивать целевой код для класса freecodecamp:

Пример кода

.freecodecamp {
  
}

Создать новое правило CSS, которое нацелено на класс marker и установить его свойство background-color на red.

Примечание: Вы не увидите никаких изменений после добавления CSS.



Шаг 12
Цвет фона был применен, но так как маркер div не имеет никакого содержания в нем, он по умолчанию не имеет никакой высоты.

В правиле . marker CSS, установите свойство height на 25px и свойства width на 200px



Шаг 13
Ваш маркер будет выглядеть лучше, если он будет сфокусирован на странице. Простой способ сделать это - с помощью свойства Margin Shorthand.

В последнем проекте вы устанавливаете область элементов отдельно с такими свойствами, как margin-top и margin-left. Свойство margin shorthand позволяет легко устанавливать сразу несколько областей.

Для того, чтобы сфокусировать маркер на странице, установите его свойство margin на auto. Это позволяет установить значение margin-top, margin-right, margin-bottom и margin-left на auto.



Шаг 14
Теперь, когда у вас есть один маркер с цветом в центре, пришло время добавить другие маркеры.

В container div добавьте еще два div-элемента и дайте каждому из них класс marker.



Шаг 15
Хотя у вас есть три отдельных маркера div элементов, они выглядят как один большой прямоугольник. Вы должны добавить некоторое пространство между ними, чтобы было легче увидеть каждый элемент.

Если свойство margin shorthand имеет два значения, то оно устанавливает margin-top и margin-bottom для первого значения, а margin-left и margin-right для второго значения.

В правиле . marker CSS, установите свойство margin на 10px auto.



Шаг 16
Чтобы дать маркерам различные цвета, вам нужно будет добавить уникальный класс для каждого. Несколько классов могут быть добавлены к элементу, перечисляя их в атрибуте class и разделяя их пробелами. Например, следующее добавляет классы животных и собак в элемент div.

Пример кода

<div class="animal dog">

Если вы добавляете несколько классов в HTML элемент, стили первых перечисленных вами классов могут быть отменены последующими классами.

Для начала добавьте класс one к первому маркерному элементу div.



Шаг 17
Далее, удалите свойство background-color и его значение из правила CSS marker.



Шаг 18
Затем создайте новое правило CSS, которое ориентируется на класс one и установите его свойство background-color на красный.



Шаг 19
Добавьте класс two вo второй маркер div, а класс three  - в третий маркер div.



Шаг 20
Создать правило CSS, которое ориентируется на класс two и установить его свойство background-color на green.

Также, создайте отдельное правило CSS, которое ориентируется на класс three и задаёт его фон-цвет blue.



Шаг 21
Существует две основные модели цвета: аддитивная модель RGB (красный, зеленый, синий), используемая в электронных устройствах, и субтрактивная модель CMYK (cyan, magenta, yellow, black), используемая в печати.

В этом проекте вы будете работать с моделью RGB. Это означает, что цвета начинаются как чёрные и изменяются по мере введения различных уровней красного, зелёного и синего. Простой способ увидеть это - с помощью функции CSS rgb.

Создайте новое правило CSS, которое ориентирует контейнер класса и установите его фон-цвет на чёрный с rgb(0, 0, 0).



Шаг 22
Функция - это кусок кода, который может принимать ввод и выполнять определенное действие. Функция CSS rgb принимает значения или аргументы для красного, зеленого и синего цвета и производит цвет:

Пример кода

rgb(red, green, blue);

Каждый красный, зеленый и синий значения - это число от 0 до 255. 0 означает, что есть 0% этого цвета, и оно черное. 255 означает, что есть 100% этого цвета.

В правиле .one CSS, заменить красное ключевое слово red с функцией rgb. Для функции rgb установите значение для красного значения 255, значение для зелёного - 0 и значение для голубого - 0.



Шаг 23
Обратите внимание, что цвет фона для маркера все еще красный. Это потому, что вы установили красное значение функции rgb до максимума 255, или 100% красный, и установили оба значения зеленый и синий 0.

Теперь используйте функцию rgb, чтобы установить другие цвета.

В правиле .two CSS, используйте функцию rgb, чтобы установить цвет фона на максимальное значение для зеленого, и 0 для других значений. И в .three правила CSS, используйте функцию rgb, чтобы установить цвет фона на максимальное значение для синего, и 0 для других значений.



Шаг 24
Хотя красный и синий маркеры выглядят одинаково, зеленый гораздо легче, чем был раньше. Это потому, что ключевое слово зелёного цвета на самом деле является темнее и находится примерно в середине между черным и максимальным значением для зеленого.

В правиле .two CSS, установите зелёное значение в функции rgb на 127 для снижения её интенсивности.



Шаг 25
Теперь добавьте немного больше вертикального пространства между маркерами и краем элемента container, в котором они находятся.

В .container CSS правило, используйте свойство shorthand padding для добавления 10px верхнего и нижнего наполнения, а также установите левое и правое наполнение на 0. Это работает аналогично свойству shorthand margin, используемому ранее.



Шаг 26
В модели RGB-цвета первичные цвета являются цветами, которые при их сочетании создают чистый белый. Но для этого, каждый цвет должен быть на его самой высокой интенсивности.

Перед комбинированием цветов, установите зелёный маркер на чистый зеленый. Для функции rgb в .two правила CSS, зеленый назад к максимальному значению 255.



Шаг 27
Теперь, когда у вас есть основные цвета RGB, пришло время их комбинировать.

Для функции rgb в правиле .container, установите значения красного, зеленого и синего на максимум 255.



Шаг 28
Вторичные цвета - это цвета, получаемые при комбинировании первичных цветов. Вы могли заметить некоторые вторичные цвета в последнем шаге, когда вы изменили красные, зеленые и синие значения.

Для создания первого вторичного цвета, желтого, обновите функцию rgb в .one CSS правила, чтобы объединить чистый красный и чистый зеленый.



Шаг 29
Чтобы создать следующий вторичный цвет, cyan голубой, обновите функцию rgb в правиле .two CSS, чтобы объединить чистый зеленый и чистый синий.



Шаг 30
Чтобы создать последний вторичный цвет, magenta пурпурный, обновите функцию rgb в правиле . three CSS, чтобы объединить чистый синий и чистый красный.



Шаг 31
Теперь, когда вы знакомы с вторичными цветами, вы научитесь создавать третичные цвета. Третичные цвета создаются путем сочетания первичного и близлежащего вторичного цветов.

Чтобы создать третичный цвет оранжевый, обновите функцию rgb в правиле .one CSS так, что красный будет на максимальном значении и установите зелёный на 127.



Шаг 32
Обратите внимание, что для создания оранжевого цвета нужно было увеличить интенсивность красного и уменьшить интенсивность зеленых значений rgb. Это потому, что оранжевый - комбинация красного и желтого.

Для создания третичного цвета spring green, комбинируйте синий с зелёным. Обновите функцию rgb в .two правила CSS так, что зеленый будет на максимальном значении, и поставьте синий на 127.



Шаг 33
Для создания третичного цвета violet фиолетовый, комбинируйте пурпурное с синим. Обновите функцию rgb в .three  правила CSS так, что синий будет на максимальном значении, а красный - 127.



Шаг 34
Есть еще три третичных цвета: chartreuse green (зеленый + желтый), лазурный azure (синий + синий), и розовый rose (красный + пурпурно).

Чтобы создать chartreuse green цвет, обновите функцию rgb в правиле .one CSS так, чтобы красный был на 127 и установите зелёный на максимальное значение.

Для azure, обновите функцию rgb в правиле .two CSS так, чтобы зелёный был на 127 и синий - на максимальном значении.

Для розовый, которую иногда называют ярко-розовым, обновите функцию rgb в .three правила CSS так, что синий - 127, а красный - max.



Шаг 35
Теперь, когда вы прошли через все первичные, вторичные и третичные цвета на цветовой круг, будет легче понять другие концепции теории цвета и как они влияют на дизайн.

Во-первых, в правилах CSS .one, .two, и .three, настроить значения в функции rgb так, чтобы цвет фона каждого элемента был установлен на чистый черный. Помните, что функция rgb использует модель добавления цвета, где цвета начинаются как чёрные и изменяются по мере увеличения значений красного, зеленого и синего.



Шаг 36
Цветное колесо - это круг, в котором похожие цвета или оттенки находятся рядом друг с другом, а разные - дальше. Например, чистый красный - между розовыми и оранжевыми оттенками.

Два цвета, противоположные друг от друга на цветовом круге называются взаимодополняющими цветами. Если два взаимодополняющих цвета сочетаются, они производят серый. Но когда они размещены рядом, эти цвета производят сильный визуальный контраст и выглядят ярче.

В функции rgb для правила .one CSS, установите значение red до максимума 255 для получения чистого красного. В функции rgb для .two правила CSS, установите значения для зеленого и синего до максимума 255, чтобы произвести cyan.



Шаг 37
Обратите внимание, что красные и синие цвета очень яркие рядом друг с другом. Этот контраст может отвлечь внимание, если он используется чрезмерно на веб-сайте, и может сделать текст трудным для чтения, если он помещен на фон с дополнительными цветами.

Лучше всего выбрать один цвет в качестве доминирующего и использовать его дополнительный цвет как акцент, чтобы привлечь внимание к определенному контенту на странице.

Во-первых, в правиле h1, используйте функцию rgb, чтобы установить цвет фона на синий.



Шаг 38
Далее, в правиле .one CSS, используйте функцию rgb, чтобы установить цвет фона на чёрный. И в .two правила CSS, используйте функцию rgb, чтобы установить цвет фона на красный.



Шаг 39
Заметьте, как ваши глаза естественным образом привлекаются к красному цвету в центре? При проектировании сайта вы можете использовать этот эффект, чтобы привлечь внимание к важным заголовкам, значкам или ссылкам.

Есть несколько других важных комбинаций цветов за пределами комплементарных цветов, но вы узнаете их немного позже.

Сейчас используйте функцию rgb в правиле .two CSS, чтобы установить цвет фона на чёрный.



Шаг 40
И в правиле h1 CSS, удалите свойство background-color и значение, чтобы вернуться к стандартному белому цвету.



Шаг 41
Теперь пришло время добавить другие детали к маркерам, начиная с первого.

В первом маркерном div-элементе изменить класс one на red.



Шаг 42
Обновить .one правило CSS для нового .red класса.



Шаг 43
Обновить функцию rgb в правиле .red CSS так, чтобы красное значение было максимальным.



Шаг 44
Далее, измените класс two на green в втором маркере div, а класс three на blue в третьем маркере div.



Шаг 45
Обновить селектор класса CSS .two так, что он нацелен на новый класс green. И обновить селектор класса .three так, чтобы он нацелился на новый класс blue.



Шаг 46
Очень распространенный способ применения цвета к элементу с CSS - с шестнадцатеричными или hex значениями. Хотя шестнадцатеричные значения кажутся сложными, на самом деле это просто другая форма значений RGB.

Значения цвета Hex начинаются с # знака и берут шесть знаков от 0-9 и А-F. Первая пара знаков обозначает красный цвет, вторая пара - зеленый цвет, а третья пара - синий. Например, #4B5320.

В наборе класса .green, установите свойство background-color на шестигранный код цвета с значениями 00 для красного, FF для зеленого и 00 для синего.



Шаг 47
Возможно, вы уже знакомы с десятичными или 10-значными значениями, которые варьируются от 0 - 9. Шестнадцатеричные или 16-значные значения, варьируются от 0 - 9, затем А - F:

Пример кода

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

При использовании hex цветов 00 - 0% от этого цвета, а FF - 100%. Таким образом #00FF00 переводится в 0% красный, 100% зеленый и 0% синий, и является тем же, что и rgb(0, 255, 0).

Снижайте интенсивность зеленого цвета, установив значение зелёного hex цвета на 7F.



Шаг 48
Цветовая модель HSL, или оттенок, насыщенность и яркость, является еще одним способом представления цветов.

Функция CSS hsl принимает 3 значения: число от 0 до 360 для оттенка, процент от 0 до 100 для насыщения и процент от 0 до 100 для яркости.

Если вы представляете цветовое колесо, то красное - это 0 градусов, зеленое - 120 градусов, а синее - 240 градусов.

Насыщенность - это интенсивность цвета от 0%, или серого, до 100% для чистого цвета. Вы должны добавить %-процентный знак к значениям насыщенности и яркости.

Яркость - это то, как ярко появляется цвет, от 0%, или полного черного, до 100%, полного белого, с 50% нейтральным.

В правиле .blue CSS используйте функцию hsl, чтобы изменить свойство background-color на чистый синий. Установите цветовой оттенок на 240, насыщенность - на 100%, а яркость - на 50%.



Шаг 49
Вы изучили несколько способов установки плоских цветов в CSS, но вы также можете использовать цветовой переход или градиент на элементе.

Градиент - это когда один цвет переходит в другой. Функция linear-gradient CSS позволяет управлять направлением перехода вдоль линии, и какие цвета используются.

Следует помнить, что функция линейного градиента фактически создает элемент изображения и обычно связывается с свойством фона, которая может принять изображение в качестве значения.

В правиле .red CSS изменить свойство background-color на background.



Шаг 50
Функция linear-gradient очень гибкая - вот базовый синтаксис, который вы используете в этом учебнике:

Пример кода

linear-gradient (gradientDirection, color1, color2, ...);

gradientDirection - направление линии, используемой для перехода. color1 и color2 - это аргументы цвета, которые будут использованы в самом переходе. Это может быть любой тип цвета, включая цветовые ключевые слова, hex, rgb или hsl.

Теперь вы наносите градиент от красного до зелёного вдоль 90-градусной линии к первому маркеру.

Во-первых, в правиле .red CSS, установите фоновое свойство на linear-gradient(), и передайте ему значение 90deg как gradientDirection.



Шаг 51
Вы будете использовать функцию rgb для цветов этого градиента.

В linear-gradient функции используйте функцию rgb, чтобы установить первый аргумент цвета на чистый красный.



Шаг 52
Вы не увидите градиент, так как для работы функции linear-gradient требуется по крайней мере два аргумента цвета.

В той же linear-gradient функции используйте функцию rgb, чтобы установить второй аргумент цвета на чистый зелёный.



Шаг 53
Как вы можете видеть, функция linear-gradient производит гладкий красно-зеленый градиент. Хотя функция linear-gradient для работы требует минимум двух аргументов цвета, она может принимать множество аргументов цветов.

Используйте функцию rgb, чтобы добавить чистый синий в качестве третьего аргумента к функции линейного градиента.



Шаг 54
Остановки цвета позволяют отрегулировать, где будут размещены цвета по линии градиента. Они являются единицей длины, как px или проценты, которые следуют за цветом в функции linear-gradient.

Например, в этом красно-чёрном градиенте переход от красного к черному происходит в точке 90% вдоль градиентной линии, поэтому красный занимает большую часть имеющегося пространства:

Пример кода

linear-gradient(90deg, red 90%, black);

В функции линейного градиента добавьте 75% цветовой стоп после первого аргумента красного цвета. Не добавляйте цветовые стопы к другим аргументам цветов.



Шаг 55
Теперь, когда вы знаете основы работы функции linear-gradient и цветовых остановок, вы можете использовать их для того, чтобы маркеры выглядели более реалистично.

В функции linear-gradient установить gradientDirection на 180deg.



Шаг 56
Далее, установите остановку цвета для красного на 0%, остановку цвета для зелёного на 50% и остановку цвета для синего на 100%.



Шаг 57
Теперь, когда вы установили остановки цвета, вы будете применять различные оттенки красного к каждому аргументу цвета в функции linear-gradient. Оттенки на верхнем и нижнем краях маркера будут темнее, в то время как те, что в середине будет светлее, как если бы над ним был свет.

Для первого аргумента цвета, который в настоящее время является чистым красным, обновите функцию rgb так, что значение для красного будет 122, значение для зелёного - 74, а значение для голубого - 14.



Шаг 58
Теперь измените второй аргумент цвета в функции linear-gradient, которая в настоящее время чисто зеленая.

Обновите функцию rgb так, что значение красного будет 245, значение зелёного - 62, а значение голубого - 113.



Шаг 59
Наконец, измените третий аргумент цвета в функции linear-gradient, которая в настоящее время является чистым синим.

Обновить функцию rgb таким образом, что значение красного будет 162, значение зелёного - 27, а значение голубого - 27.